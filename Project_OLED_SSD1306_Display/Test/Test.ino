#include <Arduino.h>
#include <U8g2lib.h>
#include <SPI.h>

#include <Wire.h> // library requires for IIC communication

//U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE); // initialization for the used OLED display

//U8G2_SSD1306_ADAFRUIT_128X64 u8g2 (13, 11, 10, 9, 8); // SW SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9

//U8G2_SSD1306_128X64_NONAME_1_4w_hw_spi(13, 11, 10, 9, 8); // SW SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9

//U8G2_SSD1306_128X64_NONAME_1_4W_HW_SPI u8g2 (U8G2_R0, 10, 9, 8);

//U8G2_SSD1306_128X64_NONAME_1_4W_SW_SPI u8g2(U8G2_R0, /* clock=*/ 13, /* data=*/ 11, /* cs=*/ 10, /* dc=*/ 9, /* reset=*/ 8);
//U8G2_SSD1306_128X64_NONAME_F_4W_SW_SPI u8g2(U8G2_R0, /* clock=*/ 7, /* data=*/ 5, /* cs=*/ 10, /* dc=*/ 3, /* reset=*/ 2);

//U8G2_SSD1306_128X64_NONAME_F_4W_HW_SPI u8g2(U8G2_R0, /*cs=*/ U8X8_PIN_NONE, /* dc=*/ 3, /* reset=*/ 2); // [page buffer, size = 128 bytes]
//U8G2_SSD1306_128X64_NONAME_F_4W_SW_SPI u8g2(U8G2_R0, /* clock=*/ 22, /* data=*/ 23, /* cs=*/ U8X8_PIN_NONE, /* dc=*/ 21, /* reset=*/ 19);

U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

// images from https://lopaka.app/
static const unsigned char image_Lock_7x8_bits[] U8X8_PROGMEM = {0x1c, 0x22, 0x22, 0x7f, 0x7f, 0x77, 0x7f, 0x3e};
static const unsigned char image_Bluetooth_Idle_5x8_bits[] U8X8_PROGMEM = {0x04, 0x0d, 0x16, 0x0c, 0x0c, 0x16, 0x0d, 0x04};
static const unsigned char image_Volup_8x6_bits[] U8X8_PROGMEM = {0x48, 0x8c, 0xaf, 0xaf, 0x8c, 0x48};
static const unsigned char image_Alert_9x8_bits[] U8X8_PROGMEM = {0x10, 0x00, 0x38, 0x00, 0x28, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0xfe, 0x00, 0xee, 0x00, 0xff, 0x01};

static const unsigned char image_wifi_full_bits[] U8X8_PROGMEM = {0x80, 0x0f, 0x00, 0xe0, 0x3f, 0x00, 0x78, 0xf0, 0x00, 0x9c, 0xcf, 0x01, 0xee, 0xbf, 0x03, 0xf7, 0x78, 0x07, 0x3a, 0xe7, 0x02, 0xdc, 0xdf, 0x01, 0xe8, 0xb8, 0x00, 0x70, 0x77, 0x00, 0xa0, 0x2f, 0x00, 0xc0, 0x1d, 0x00, 0x80, 0x0a, 0x00, 0x00, 0x07, 0x00, 0x00, 0x02, 0x00};
static const unsigned char image_network_4_bars_bits[] U8X8_PROGMEM = {0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x77, 0x00, 0x77, 0x00, 0x77, 0x00, 0x77, 0x70, 0x77, 0x70, 0x77, 0x70, 0x77, 0x70, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x00, 0x00};
static const unsigned char image_battery_100_bits[] U8X8_PROGMEM = {0x00, 0x00, 0x00, 0xf0, 0xff, 0x7f, 0x08, 0x00, 0x80, 0xa8, 0xaa, 0xaa, 0xae, 0xaa, 0xaa, 0xa1, 0xaa, 0xaa, 0xa1, 0xaa, 0xaa, 0xa1, 0xaa, 0xaa, 0xa1, 0xaa, 0xaa, 0xa1, 0xaa, 0xaa, 0xae, 0xaa, 0xaa, 0xa8, 0xaa, 0xaa, 0x08, 0x00, 0x80, 0xf0, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const unsigned char image_arrow_curved_left_down_bits[] U8X8_PROGMEM = {0x10, 0x08, 0x0c, 0x04, 0x1f, 0x0e, 0x04};
static const unsigned char image_Alert_bits[] U8X8_PROGMEM = {0x10, 0x00, 0x38, 0x00, 0x28, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0xfe, 0x00, 0xee, 0x00, 0xff, 0x01};
static const unsigned char image_display_brightness_bits[] U8X8_PROGMEM = {0x80, 0x00, 0x84, 0x10, 0x08, 0x08, 0xc0, 0x01, 0x31, 0x46, 0x12, 0x24, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x12, 0x24, 0x31, 0x46, 0xc0, 0x01, 0x08, 0x08, 0x84, 0x10, 0x80, 0x00, 0x00, 0x00};
static const unsigned char image_Battery_bits[] U8X8_PROGMEM = {0xfe, 0xff, 0x7f, 0x00, 0x01, 0x00, 0x80, 0x00, 0x01, 0x00, 0x80, 0x03, 0x01, 0x00, 0x80, 0x02, 0x01, 0x00, 0x80, 0x02, 0x01, 0x00, 0x80, 0x03, 0x01, 0x00, 0x80, 0x00, 0xfe, 0xff, 0x7f, 0x00};
static const unsigned char image_battery_0_bits[] U8X8_PROGMEM = {0x00, 0x00, 0x00, 0xf0, 0xff, 0x7f, 0x08, 0x00, 0x80, 0x08, 0x02, 0x82, 0x0e, 0x04, 0x81, 0x01, 0x88, 0x80, 0x01, 0x50, 0x80, 0x01, 0x20, 0x80, 0x01, 0x50, 0x80, 0x01, 0x88, 0x80, 0x0e, 0x04, 0x81, 0x08, 0x02, 0x82, 0x08, 0x00, 0x80, 0xf0, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// 'LOGOV2 (1)', 128x64px
const unsigned char logoLOGOV2 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
  0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
  0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 
  0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 
  0x00, 0x80, 0x0f, 0x00, 0x06, 0xf0, 0xff, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0xfe, 0x00, 0xc0, 0x03, 
  0x00, 0x00, 0x0f, 0x00, 0x0e, 0xf0, 0xff, 0x1f, 0x30, 0x00, 0x18, 0x00, 0xfc, 0x01, 0xe0, 0x01, 
  0x00, 0x00, 0x1f, 0x00, 0x1f, 0xf8, 0xff, 0x1f, 0x38, 0x00, 0x38, 0x00, 0xf8, 0x03, 0xe0, 0x01, 
  0x00, 0x00, 0x0f, 0x80, 0x0f, 0xfc, 0xff, 0x1f, 0x1c, 0x18, 0x1c, 0x08, 0xf8, 0x01, 0xf8, 0x01, 
  0x00, 0x80, 0x0f, 0xc0, 0x0f, 0xfe, 0xff, 0x0f, 0x1c, 0x3c, 0x1e, 0x1c, 0xfc, 0x00, 0xf8, 0x00, 
  0x00, 0x80, 0x07, 0xc0, 0x0f, 0xfe, 0xff, 0x0f, 0x1e, 0xfc, 0x0f, 0x0c, 0xfc, 0x00, 0x98, 0x00, 
  0x00, 0xc0, 0x03, 0xc1, 0x07, 0xff, 0xff, 0x0f, 0x1e, 0x00, 0x0e, 0x00, 0x7e, 0x10, 0x18, 0x00, 
  0x00, 0xe0, 0x83, 0xc0, 0x07, 0xff, 0x03, 0x06, 0x1f, 0x00, 0x0e, 0x00, 0x3f, 0x10, 0x18, 0x00, 
  0x00, 0xe0, 0x01, 0xc0, 0x03, 0xff, 0x01, 0x07, 0x3f, 0x00, 0x06, 0x80, 0x3f, 0x00, 0x1c, 0x00, 
  0x00, 0xf0, 0x00, 0xe0, 0x83, 0xff, 0x01, 0x03, 0xff, 0x07, 0x07, 0x81, 0x1f, 0x00, 0x1c, 0x00, 
  0x00, 0xf8, 0x00, 0xe0, 0x83, 0xc1, 0xff, 0x83, 0x07, 0x07, 0x07, 0x03, 0x1f, 0x00, 0x7c, 0x00, 
  0x00, 0x7c, 0x60, 0xe0, 0x81, 0xc1, 0xff, 0x83, 0x07, 0x83, 0x03, 0x03, 0x0f, 0x0c, 0x3c, 0x00, 
  0x00, 0x3f, 0x70, 0xc0, 0x00, 0xe0, 0xff, 0x01, 0x03, 0x80, 0x01, 0x03, 0x07, 0x0e, 0x38, 0x00, 
  0x80, 0x1f, 0x70, 0x40, 0x00, 0xe0, 0xff, 0x80, 0x03, 0xc0, 0x00, 0x01, 0x03, 0x0f, 0x18, 0x00, 
  0xe0, 0x0f, 0x78, 0x20, 0x00, 0xf0, 0x7f, 0xc0, 0x01, 0x60, 0x80, 0x81, 0x01, 0x0f, 0x1c, 0x00, 
  0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 
  0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf0, 0xee, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf0, 0x2e, 0x1c, 0x51, 0x11, 0x61, 0x74, 0x0c, 0xc2, 0xc4, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xb0, 0x2e, 0x1c, 0x00, 0x00, 0x60, 0x10, 0x0c, 0x00, 0x40, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x30, 0x3f, 0x9e, 0x80, 0xaa, 0x6a, 0x54, 0xec, 0x15, 0x45, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x70, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf0, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xdf, 0x73, 0xdc, 0x3c, 0x6e, 0x78, 0x70, 0x80, 0xe7, 0xf1, 0xf1, 0xc3, 0xe3, 0x00, 
  0x00, 0x1f, 0xff, 0x7b, 0xff, 0x3d, 0x7f, 0xfc, 0xf8, 0x80, 0xe7, 0xf9, 0xf3, 0xcf, 0xf7, 0x00, 
  0x00, 0xbe, 0xcf, 0x71, 0xef, 0x9d, 0x7f, 0xf8, 0x70, 0x00, 0xe7, 0xbc, 0x77, 0x8e, 0xe7, 0x00, 
  0x00, 0xbe, 0xcf, 0x71, 0xcf, 0x9c, 0x63, 0xfc, 0x70, 0x00, 0xe7, 0x1c, 0x67, 0x8e, 0x6f, 0x00, 
  0x00, 0xfe, 0xcf, 0x71, 0x3f, 0x9c, 0x03, 0xcc, 0x71, 0x00, 0xff, 0x1c, 0xe7, 0x87, 0x7f, 0x00, 
  0x00, 0xfe, 0xcf, 0x71, 0xfc, 0x9c, 0x03, 0xfc, 0x71, 0x00, 0xff, 0x1c, 0xe7, 0x87, 0x7f, 0x00, 
  0x00, 0xf6, 0xcd, 0x31, 0xf3, 0x9d, 0x03, 0xfe, 0x71, 0x06, 0xe7, 0x1c, 0x67, 0x8e, 0x7d, 0x00, 
  0x00, 0xf6, 0x8e, 0x3b, 0xe7, 0x9d, 0x67, 0xce, 0x73, 0x06, 0xe7, 0xbc, 0x77, 0x9e, 0x79, 0x00, 
  0x00, 0xff, 0x9e, 0x3f, 0xff, 0x3c, 0x7f, 0xcf, 0xff, 0x87, 0xe7, 0xf9, 0xf3, 0xde, 0x73, 0x00, 
  0x00, 0xef, 0x1e, 0x1f, 0x7b, 0x3c, 0x3e, 0xcf, 0xff, 0x87, 0xe7, 0xf1, 0xf1, 0xdc, 0x73, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

int progress = 0; // progress of the progressbar
char buffer[32]; // helper buffer to construct a string to be displayed

void setup(void) {

  u8g2.begin(); // start the u8g2 library
  Serial.begin(115200);  
  
//  u8g2.drawFrame(10, 31, 108, 14); // Draw the frame of the progress bar
//  u8g2.drawBox(12, 33, progress, 10); // Draw the progress bar fill
//  u8g2.setFont(u8g2_font_helvB08_tr);
//  sprintf(buffer, "Progress: %d%%", progress); // Construct a string with the progress variable
//  u8g2.drawStr(33, 60, buffer); // Display the percentage
//  u8g2.drawLine(0, 15, 128, 15);
//  u8g2.setFont(u8g2_font_haxrcorp4089_tr);
//  u8g2.drawStr(1, 8, "habib Muhammad");


//  u8g2.drawXBMP(86, 15, 15, 16, image_network_4_bars_bits);
//  u8g2.drawXBMP(60, 15, 15, 16, image_display_brightness_bits);
//  u8g2.drawXBMP(31, 15, 24, 16, image_battery_0_bits);
//  
//  u8g2.drawXBMP(107, 15, 19, 15, image_wifi_full_bits);
//  u8g2.drawXBMP(1, 15, 24, 16, image_battery_100_bits);
//  u8g2.drawXBMP(78, 1, 26, 8, image_Battery_bits);
//  u8g2.drawXBMP(107, 1, 9, 8, image_Alert_bits);
//  u8g2.drawXBMP(120, 2, 5, 7, image_arrow_curved_left_down_bits);
//  u8g2.drawXBMP(1, 50, 24, 16, image_battery_0_bits);
//  u8g2.drawXBMP(109, 49, 15, 16, image_network_4_bars_bits);
  //    u8g2.drawXBMP(5, 29, 15, 16, image_display_brightness_bits);
//  //    u8g2.drawStr(29, 56, "progress : ");
  //    u8g2.drawStr(82, 57, "30%");
  u8g2.clearBuffer();
  u8g2.setFontMode(1);
  u8g2.setBitmapMode(1);
  u8g2.setFont(u8g2_font_helvB08_tr);
  u8g2.drawStr(105, 8, "V3.1");
  u8g2.drawXBMP(0, 0, 128, 64, logoLOGOV2);
  u8g2.sendBuffer();
  delay(3000);
  u8g2.clearBuffer();
  for(int i = 0; i <= 100; i = i+2){    
    u8g2.drawFrame(10, 48, 108, 14); // Draw the frame of the progress bar
    u8g2.drawBox(12, 50, i, 10); // Draw the progress bar fill
    u8g2.updateDisplayArea(0, 6, 16, 2);  //tile_area_x_pos, tile_area_y_pos, tile_area_width, tile_area_height
  }
  
}

void loop(void) {
  unsigned long startTime = millis();

  u8g2.clearBuffer();            // clear the complete internal memory

//  u8g2.drawXBMP(16, 0, 100, 40, epd_bitmap_alisralogo__1_);
  
//  u8g2.drawFrame(10, 31, 108, 14); // Draw the frame of the progress bar
//  u8g2.drawBox(12, 33, progress, 10); // Draw the progress bar fill
//  u8g2.setFont(u8g2_font_helvB08_tr);
//  sprintf(buffer, "Progress: %d%%", progress); // Construct a string with the progress variable
//  u8g2.drawStr(33, 60, buffer); // Display the percentage
  
//  u8g2.drawXBMP(1, 50, 24, 16, image_battery_0_bits);
//  u8g2.drawXBMP(109, 49, 15, 16, image_network_4_bars_bits);
  
//  u8g2.sendBuffer();
  // now only update the selected area, the rest of the display content is not changed
//  u8g2.updateDisplayArea(0, 4, 16, 4);  //tile_area_x_pos, tile_area_y_pos, tile_area_width, tile_area_height
  
//  SPI.beginTransaction(SPISettings(8000000, MSBFIRST, SPI_MODE0));
 // transfer internal memory to the display
//  SPI.endTransaction();

  //  u8g2.clearBuffer();
  //  u8g2.setFontMode(1);
  //  u8g2.setBitmapMode(1);
  //  u8g2.drawFrame(25, 27, 81, 19);
  //  u8g2.drawBox(27, 29, 75, 15);
  //  u8g2.setFont(u8g2_font_helvB08_tr);
  //  u8g2.drawStr(29, 56, "progress : ");
  //  u8g2.drawStr(82, 57, "30%");
  //  u8g2.drawLine(0, 11, 128, 11);
  //  u8g2.setFont(u8g2_font_haxrcorp4089_tr);
  //  u8g2.drawStr(2, 8, "habib Muhammad");
  //  u8g2.drawXBMP(107, 13, 19, 15, image_wifi_full_bits);
  //  u8g2.drawXBMP(109, 45, 15, 16, image_network_4_bars_bits);
  //  u8g2.drawXBMP(1, 12, 24, 16, image_battery_100_bits);
  //  u8g2.drawXBMP(120, 2, 5, 7, image_arrow_curved_left_down_bits);
  //  u8g2.drawXBMP(107, 1, 9, 8, image_Alert_bits);
  //  u8g2.drawXBMP(5, 29, 15, 16, image_display_brightness_bits);
  //  u8g2.drawXBMP(78, 1, 26, 8, image_Battery_bits);
  //  u8g2.drawXBMP(1, 48, 24, 16, image_battery_0_bits);
  //  u8g2.sendBuffer();

//  u8g2.clearBuffer(); // clear the internal memory

    u8g2.setBitmapMode(1);
    u8g2.drawFrame(12, 21, 104, 20);
    u8g2.drawBox(14, 23, progress, 16); // draw the progress bar fill
    u8g2.setFont(u8g2_font_helvB08_tr);
    sprintf(buffer, "Progress: %d%%", progress); // construct a string with the progress variable
    u8g2.drawStr(33, 53, buffer); // display the string
    u8g2.setFont(u8g2_font_haxrcorp4089_tr);
    u8g2.drawStr(0, 7, "Progress Bar Screen");
    u8g2.drawLine(0, 9, 127, 9);
    u8g2.drawXBMP( 100, 0, 7, 8, image_Lock_7x8_bits);
    u8g2.drawXBMP( 111, 0, 5, 8, image_Bluetooth_Idle_5x8_bits);
    u8g2.drawXBMP( 120, 1, 8, 6, image_Volup_8x6_bits);
    u8g2.drawXBMP( 22, 45, 9, 8, image_Alert_9x8_bits);
  //
    u8g2.sendBuffer(); // transfer internal memory to the display

  unsigned long endTime = millis();
  Serial.print("Update time (miliseconds): ");
  Serial.println(endTime - startTime);

  // increase the progress value to go over 0-100
  progress = progress + 1;
  if (progress > 100) {
    progress = 0;
  }
  //  delay(100); // add delay to see the progress increasing




  //   u8g2.clearBuffer();          // clear the internal memory
  //
  //  // // code from https://lopaka.app/
  //   u8g2.setBitmapMode(1);
  //   u8g2.drawFrame(12, 21, 104, 20);
  //   u8g2.drawBox(14, 23, progress, 16); // draw the progressbar fill
  //   u8g2.setFont(u8g2_font_helvB08_tr);
  //   sprintf(buffer, "Progress: %d%%", progress); // construct a string with the progress variable
  //   u8g2.drawStr(33, 53, buffer); // display the string
  //   u8g2.setFont(u8g2_font_haxrcorp4089_tr);
  //   u8g2.drawStr(0, 7, "Progress Bar Screen");
  //   u8g2.drawLine(0, 9, 127, 9);
  //   u8g2.drawXBMP( 100, 0, 7, 8, image_Lock_7x8_bits);
  //   u8g2.drawXBMP( 111, 0, 5, 8, image_Bluetooth_Idle_5x8_bits);
  //   u8g2.drawXBMP( 120, 1, 8, 6, image_Volup_8x6_bits);
  //   u8g2.drawXBMP( 22, 45, 9, 8, image_Alert_9x8_bits);
  //
  //
  //   u8g2.sendBuffer();         // transfer internal memory to the display

  // // increase the progress value to go over 0-100
  //   progress = progress + 1;
  //   if (progress > 100) {
  //    progress = 0;
  //   }
}
