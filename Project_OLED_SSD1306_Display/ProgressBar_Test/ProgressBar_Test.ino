#include <Arduino.h>
#include <U8g2lib.h>
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);
//U8G2_SSD1306_128X64_NONAME_F_4W_HW_SPI u8g2(U8G2_R0, /*cs=*/ 10, /* dc=*/ 3, /* reset=*/ 2); // [page buffer, size = 128 bytes]
//U8G2_SSD1306_128X64_NONAME_1_4W_SW_SPI u8g2(U8G2_R0, /* clock=*/ 7, /* data=*/ 5, /* cs=*/ 10, /* dc=*/ 3, /* reset=*/ 2);
int progress = 0; // Initialize progress variable

static const unsigned char image_Lock_7x8_bits[] U8X8_PROGMEM = {0x1c, 0x22, 0x22, 0x7f, 0x7f, 0x77, 0x7f, 0x3e};
static const unsigned char image_Bluetooth_Idle_5x8_bits[] U8X8_PROGMEM = {0x04, 0x0d, 0x16, 0x0c, 0x0c, 0x16, 0x0d, 0x04};
static const unsigned char image_Volup_8x6_bits[] U8X8_PROGMEM = {0x48, 0x8c, 0xaf, 0xaf, 0x8c, 0x48};
static const unsigned char image_Alert_9x8_bits[] U8X8_PROGMEM = {0x10, 0x00, 0x38, 0x00, 0x28, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0xfe, 0x00, 0xee, 0x00, 0xff, 0x01};

static const unsigned char image_wifi_full_bits[] U8X8_PROGMEM = {0x80, 0x0f, 0x00, 0xe0, 0x3f, 0x00, 0x78, 0xf0, 0x00, 0x9c, 0xcf, 0x01, 0xee, 0xbf, 0x03, 0xf7, 0x78, 0x07, 0x3a, 0xe7, 0x02, 0xdc, 0xdf, 0x01, 0xe8, 0xb8, 0x00, 0x70, 0x77, 0x00, 0xa0, 0x2f, 0x00, 0xc0, 0x1d, 0x00, 0x80, 0x0a, 0x00, 0x00, 0x07, 0x00, 0x00, 0x02, 0x00};
static const unsigned char image_network_4_bars_bits[] U8X8_PROGMEM = {0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x77, 0x00, 0x77, 0x00, 0x77, 0x00, 0x77, 0x70, 0x77, 0x70, 0x77, 0x70, 0x77, 0x70, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x00, 0x00};
static const unsigned char image_battery_100_bits[] U8X8_PROGMEM = {0x00, 0x00, 0x00, 0xf0, 0xff, 0x7f, 0x08, 0x00, 0x80, 0xa8, 0xaa, 0xaa, 0xae, 0xaa, 0xaa, 0xa1, 0xaa, 0xaa, 0xa1, 0xaa, 0xaa, 0xa1, 0xaa, 0xaa, 0xa1, 0xaa, 0xaa, 0xa1, 0xaa, 0xaa, 0xae, 0xaa, 0xaa, 0xa8, 0xaa, 0xaa, 0x08, 0x00, 0x80, 0xf0, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const unsigned char image_arrow_curved_left_down_bits[] U8X8_PROGMEM = {0x10, 0x08, 0x0c, 0x04, 0x1f, 0x0e, 0x04};
static const unsigned char image_Alert_bits[] U8X8_PROGMEM = {0x10, 0x00, 0x38, 0x00, 0x28, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0xfe, 0x00, 0xee, 0x00, 0xff, 0x01};
static const unsigned char image_display_brightness_bits[] U8X8_PROGMEM = {0x80, 0x00, 0x84, 0x10, 0x08, 0x08, 0xc0, 0x01, 0x31, 0x46, 0x12, 0x24, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x12, 0x24, 0x31, 0x46, 0xc0, 0x01, 0x08, 0x08, 0x84, 0x10, 0x80, 0x00, 0x00, 0x00};
static const unsigned char image_Battery_bits[] U8X8_PROGMEM = {0xfe, 0xff, 0x7f, 0x00, 0x01, 0x00, 0x80, 0x00, 0x01, 0x00, 0x80, 0x03, 0x01, 0x00, 0x80, 0x02, 0x01, 0x00, 0x80, 0x02, 0x01, 0x00, 0x80, 0x03, 0x01, 0x00, 0x80, 0x00, 0xfe, 0xff, 0x7f, 0x00};
static const unsigned char image_battery_0_bits[] U8X8_PROGMEM = {0x00, 0x00, 0x00, 0xf0, 0xff, 0x7f, 0x08, 0x00, 0x80, 0x08, 0x02, 0x82, 0x0e, 0x04, 0x81, 0x01, 0x88, 0x80, 0x01, 0x50, 0x80, 0x01, 0x20, 0x80, 0x01, 0x50, 0x80, 0x01, 0x88, 0x80, 0x0e, 0x04, 0x81, 0x08, 0x02, 0x82, 0x08, 0x00, 0x80, 0xf0, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

void setup() {
  Serial.begin(9600);
  u8g2.begin();
}

void loop() {
  unsigned long startTime = millis();
  char buffer[20]; // Buffer to hold the progress text
  u8g2.firstPage();
  do {
    u8g2.clearBuffer();
    u8g2.setFontMode(1);
    u8g2.setBitmapMode(1);
    u8g2.drawFrame(10, 31, 108, 14); // Draw the frame of the progress bar
    u8g2.drawBox(12, 33, progress, 10); // Draw the progress bar fill
    u8g2.setFont(u8g2_font_helvB08_tr);
//    u8g2.drawStr(29, 56, "progress : ");
    sprintf(buffer, "Progress: %d%%", progress); // Construct a string with the progress variable
    u8g2.drawStr(33, 60, buffer); // Display the percentage
//    u8g2.drawStr(82, 57, "30%");
    u8g2.drawLine(0, 15, 128, 15);
    u8g2.setFont(u8g2_font_haxrcorp4089_tr);
    u8g2.drawStr(1, 8, "habib Muhammad");
    u8g2.drawXBMP(107, 15, 19, 15, image_wifi_full_bits);
    u8g2.drawXBMP(109, 49, 15, 16, image_network_4_bars_bits);
    u8g2.drawXBMP(1, 15, 24, 16, image_battery_100_bits);
    u8g2.drawXBMP(120, 2, 5, 7, image_arrow_curved_left_down_bits);
    u8g2.drawXBMP(107, 1, 9, 8, image_Alert_bits);
//    u8g2.drawXBMP(5, 29, 15, 16, image_display_brightness_bits);
    u8g2.drawXBMP(78, 1, 26, 8, image_Battery_bits);
    u8g2.drawXBMP(1, 50, 24, 16, image_battery_0_bits);
    
//    u8g2.clearBuffer(); // Clear the internal memory
//    u8g2.setFont(u8g2_font_haxrcorp4089_tr);
//    u8g2.drawStr(0, 7, "Progress Bar Screen");
//    u8g2.drawLine(0, 9, 127, 9);
//    u8g2.drawXBMP( 100, 0, 7, 8, image_Lock_7x8_bits);
//    u8g2.drawXBMP( 111, 0, 5, 8, image_Bluetooth_Idle_5x8_bits);
//    u8g2.drawXBMP( 120, 1, 8, 6, image_Volup_8x6_bits);
//    u8g2.drawXBMP( 22, 47, 9, 8, image_Alert_9x8_bits);
//    u8g2.setFont(u8g2_font_helvB08_tr);
//    u8g2.drawFrame(10, 25, 108, 14); // Draw the frame of the progress bar
//    u8g2.drawBox(12, 27, progress, 10); // Draw the progress bar fill
//    sprintf(buffer, "Progress: %d%%", progress); // Construct a string with the progress variable
//    u8g2.drawStr(35, 55, buffer); // Display the percentage
  } while ( u8g2.nextPage() ); // Continue drawing on the next page if any
  
  unsigned long endTime = millis();
  Serial.print("Update time (microseconds): ");
  Serial.println(endTime - startTime);

  progress++; // Increment progress for demonstration
  if (progress > 100) {
    progress = 0; // Reset progress after reaching 100
  }

//  delay(100); // Slow down the loop so progress updates are visible
}
